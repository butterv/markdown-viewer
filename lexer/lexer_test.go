package lexer

import (
	"bytes"
	"io/ioutil"
	"testing"

	"github.com/istsh/markdown-viewer/token"
)

type expected struct {
	expectedType    token.TokenType
	expectedLiteral string
}

func compareGotAndWant(t *testing.T, goldenPath string, tests []expected) {
	input, err := ioutil.ReadFile(goldenPath)
	if err != nil {
		t.Fatal(err)
	}

	l := New(input)

	for i, tt := range tests {
		tok := l.NextToken()

		if tt.expectedType == token.STRING {
			t.Logf("tests[%d] - got=%s(%q), want=%s(%q)", i, tok.Type, tok.Literal, tt.expectedType, tt.expectedLiteral)
		} else {
			t.Logf("tests[%d] - got=%s, want=%s", i, tok.Type, tt.expectedType)
		}

		if tok.Type != tt.expectedType {
			t.Errorf("tests[%d] - tokentype wrong. expected=%q, got=%q", i, tt.expectedType, tok.Type)
		}
		if tt.expectedType == token.STRING && !bytes.Equal(tok.Literal, []byte(tt.expectedLiteral)) {
			t.Errorf("tests[%d] - literal wrong. expected=%q, got=%q", i, tt.expectedLiteral, tok.Literal)
		}
	}
}

func TestLexer1(t *testing.T) {
	tests := []expected{
		{expectedType: token.HEADING1},
		{expectedType: token.STRING, expectedLiteral: "Heading1"},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.HEADING2},
		{expectedType: token.STRING, expectedLiteral: "Heading2"},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.HEADING3},
		{expectedType: token.STRING, expectedLiteral: "Heading3"},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.HEADING1},
		{expectedType: token.STRING, expectedLiteral: "Heading1"},
		{expectedType: token.SPACE},
		{expectedType: token.STRING, expectedLiteral: "Text"},
		{expectedType: token.SPACE},
		{expectedType: token.STRING, expectedLiteral: "#"},
		{expectedType: token.SPACE},
		{expectedType: token.STRING, expectedLiteral: "Heading1"},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.STRING, expectedLiteral: "#Heading1"},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.STRING, expectedLiteral: "##Heading2"},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.STRING, expectedLiteral: "###Heading3"},
		{expectedType: token.LINE_FEED_CODE},
		{expectedType: token.EOF},
	}

	compareGotAndWant(t, "../testdata/1.md.golden", tests)
}

func TestLexer2(t *testing.T) {
	tests := []expected{
		{token.HEADING1, "#"},
		{token.STRING, "Heading1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HEADING2, "##"},
		{token.STRING, "Heading1_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HEADING1, "#"},
		{token.STRING, "Heading2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HEADING2, "##"},
		{token.STRING, "Heading2_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB1, "\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List1_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB1, "\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List1_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HEADING1, "#"},
		{token.STRING, "Heading3"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HEADING2, "##"},
		{token.STRING, "Heading3_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB1, "\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List1_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB2, "\t\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List1_1_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.EOF, ""},
	}

	compareGotAndWant(t, "../testdata/2.md.golden", tests)
}

func TestLexer3(t *testing.T) {
	tests := []expected{
		{token.HEADING1, "#"},
		{token.SPACE, " "},
		{token.STRING, "Heading1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HEADING2, "##"},
		{token.SPACE, " "},
		{token.STRING, "Heading2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB1, "\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "Nest"},
		{token.SPACE, " "},
		{token.STRING, "List1_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB2, "\t\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "Nest"},
		{token.SPACE, " "},
		{token.STRING, "List1_1_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB2, "\t\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "Nest"},
		{token.SPACE, " "},
		{token.STRING, "List1_1_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB1, "\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "Nest"},
		{token.SPACE, " "},
		{token.STRING, "List1_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List3"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HEADING3, "###"},
		{token.SPACE, " "},
		{token.STRING, "Heading3"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB1, "\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "Nest"},
		{token.SPACE, " "},
		{token.STRING, "List1_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB2, "\t\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "Nest"},
		{token.SPACE, " "},
		{token.STRING, "List1_1_1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB2, "\t\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "Nest"},
		{token.SPACE, " "},
		{token.STRING, "List1_1_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.TAB1, "\t"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "Nest"},
		{token.SPACE, " "},
		{token.STRING, "List1_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.HYPHEN, "-"},
		{token.SPACE, " "},
		{token.STRING, "List3"},
		{token.LINE_FEED_CODE, "\n"},
		{token.CITATION1, ">"},
		{token.SPACE, " "},
		{token.STRING, "Description1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.CITATION1, ">"},
		{token.SPACE, " "},
		{token.STRING, "Description2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.CITATION1, ">"},
		{token.SPACE, " "},
		{token.STRING, "Description3_1"},
		{token.SPACE, " "},
		{token.STRING, ">"},
		{token.SPACE, " "},
		{token.STRING, "Description3_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.CITATION2, ">>"},
		{token.SPACE, " "},
		{token.STRING, "Description4"},
		{token.LINE_FEED_CODE, "\n"},
		{token.CITATION2, ">>"},
		{token.SPACE, " "},
		{token.STRING, "Description5"},
		{token.LINE_FEED_CODE, "\n"},
		{token.EOF, ""},
	}

	compareGotAndWant(t, "../testdata/3.md.golden", tests)
}

func TestLexer4(t *testing.T) {
	tests := []expected{
		{token.HEADING1, "#"},
		{token.SPACE, " "},
		{token.STRING, "Heading1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description1_1"},
		{token.SPACE, " "},
		{token.BACK_QUOTE, "`"},
		{token.STRING, "back"},
		{token.SPACE, " "},
		{token.STRING, "quote"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.BACK_QUOTE, "`"},
		{token.SPACE, " "},
		{token.STRING, "Description1_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description2_1"},
		{token.SPACE, " "},
		{token.ASTERISK_ITALIC, "*"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.ASTERISK_ITALIC, "*"},
		{token.SPACE, " "},
		{token.STRING, "Description2_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description3_1"},
		{token.SPACE, " "},
		{token.ASTERISK_BOLD, "**"},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.ASTERISK_BOLD, "**"},
		{token.SPACE, " "},
		{token.STRING, "Description3_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description4_1"},
		{token.SPACE, " "},
		{token.ASTERISK_ITALIC_BOLD, "***"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "&"},
		{token.SPACE, " "},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.ASTERISK_ITALIC_BOLD, "***"},
		{token.SPACE, " "},
		{token.STRING, "Description4_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.ASTERISK_ITALIC, "*"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.ASTERISK_ITALIC, "*"},
		{token.LINE_FEED_CODE, "\n"},
		{token.ASTERISK_BOLD, "**"},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.ASTERISK_BOLD, "**"},
		{token.LINE_FEED_CODE, "\n"},
		{token.ASTERISK_ITALIC_BOLD, "***"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "&"},
		{token.SPACE, " "},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.ASTERISK_ITALIC_BOLD, "***"},
		{token.LINE_FEED_CODE, "\n"},
		{token.EOF, ""},
	}

	compareGotAndWant(t, "../testdata/4.md.golden", tests)
}

func TestLexer5(t *testing.T) {
	tests := []expected{
		{token.HEADING1, "#"},
		{token.SPACE, " "},
		{token.STRING, "Heading1"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description1_1"},
		{token.SPACE, " "},
		{token.BACK_QUOTE, "`"},
		{token.STRING, "back"},
		{token.SPACE, " "},
		{token.STRING, "quote"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.BACK_QUOTE, "`"},
		{token.SPACE, " "},
		{token.STRING, "Description1_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description2_1"},
		{token.SPACE, " "},
		{token.UNDER_SCORE_ITALIC, "_"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_ITALIC, "_"},
		{token.SPACE, " "},
		{token.STRING, "Description2_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description3_1"},
		{token.SPACE, " "},
		{token.UNDER_SCORE_BOLD, "__"},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_BOLD, "__"},
		{token.SPACE, " "},
		{token.STRING, "Description3_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description4_1"},
		{token.SPACE, " "},
		{token.UNDER_SCORE_ITALIC_BOLD, "___"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "&"},
		{token.SPACE, " "},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_ITALIC_BOLD, "___"},
		{token.SPACE, " "},
		{token.STRING, "Description4_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.UNDER_SCORE_ITALIC, "_"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_ITALIC, "_"},
		{token.LINE_FEED_CODE, "\n"},
		{token.UNDER_SCORE_BOLD, "__"},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_BOLD, "__"},
		{token.LINE_FEED_CODE, "\n"},
		{token.UNDER_SCORE_ITALIC_BOLD, "___"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "&"},
		{token.SPACE, " "},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_ITALIC_BOLD, "___"},
		{token.LINE_FEED_CODE, "\n"},
		{token.EOF, ""},
	}

	compareGotAndWant(t, "../testdata/5.md.golden", tests)
}

func TestLexer6(t *testing.T) {
	tests := []expected{
		{token.HEADING1, "#"},
		{token.SPACE, " "},
		{token.STRING, "Heading1"},
		{token.LINE_FEED_CODE, "\n"},

		{token.STRING, "Description1_1"},
		{token.SPACE, " "},
		{token.BACK_QUOTE, "`"},
		{token.STRING, "back"},
		{token.SPACE, " "},
		{token.STRING, "quote"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.BACK_QUOTE, "`"},
		{token.SPACE, " "},
		{token.STRING, "Description1_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description2_1"},
		{token.SPACE, " "},
		{token.UNDER_SCORE_ITALIC, "_"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_ITALIC, "_"},
		{token.SPACE, " "},
		{token.STRING, "Description2_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description3_1"},
		{token.SPACE, " "},
		{token.UNDER_SCORE_BOLD, "__"},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_BOLD, "__"},
		{token.SPACE, " "},
		{token.STRING, "Description3_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.STRING, "Description4_1"},
		{token.SPACE, " "},
		{token.UNDER_SCORE_ITALIC_BOLD, "___"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "&"},
		{token.SPACE, " "},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_ITALIC_BOLD, "___"},
		{token.SPACE, " "},
		{token.STRING, "Description4_2"},
		{token.LINE_FEED_CODE, "\n"},
		{token.UNDER_SCORE_ITALIC, "_"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_ITALIC, "_"},
		{token.LINE_FEED_CODE, "\n"},
		{token.UNDER_SCORE_BOLD, "__"},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_BOLD, "__"},
		{token.LINE_FEED_CODE, "\n"},
		{token.UNDER_SCORE_ITALIC_BOLD, "___"},
		{token.STRING, "italic"},
		{token.SPACE, " "},
		{token.STRING, "&"},
		{token.SPACE, " "},
		{token.STRING, "bold"},
		{token.SPACE, " "},
		{token.STRING, "area"},
		{token.UNDER_SCORE_ITALIC_BOLD, "___"},
		{token.LINE_FEED_CODE, "\n"},
		{token.EOF, ""},
	}

	compareGotAndWant(t, "../testdata/5.md.golden", tests)
}
